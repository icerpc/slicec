// Copyright (c) ZeroC, Inc. All rights reserved.

main = { SOI ~ module_def* ~ EOI }

definition = { module_def | struct_def | interface_def | enum_def }

module_start = { module_kw ~ identifier }
module_def = { module_start ~ "{" ~ definition* ~ "}" }

struct_start = { struct_kw ~ identifier }
struct_def = { struct_start ~ "{" ~ data_member* ~ "}" }

interface_start = { interface_kw ~ identifier }
interface_def = { interface_start ~ "{" ~ "}" }

enum_start = { unchecked_modifier ~ enum_kw ~ identifier ~ ( ":" ~ typename )? }
enum_def = { enum_start ~ "{" ~ enumerator_list? ~ "}" }

return_type = { void_kw | typename | return_tuple }
return_tuple = { "(" ~ parameter_list ~ ")" }
operation = { return_type ~ identifier ~ "(" ~ parameter_list ~ ")" ~ ";" }

data_member = { typename ~ identifier ~ ";" }

parameter_list = { ( parameter ~ "," ~ parameter_list) | ( parameter ~ ","? ) }
parameter = { typename ~ identifier }

enumerator_list = { ( enumerator ~ "," ~ enumerator_list ) | ( enumerator ~ ","? ) }
enumerator = { identifier ~ ( "=" ~ integer )? }

identifier = @{ ASCII_ALPHA ~ ( "_" | ASCII_ALPHANUMERIC )* }
global_identifier = @{ ( "::" ~ identifier )+ }
scoped_identifier = @{ identifier ~ ( "::" ~ identifier )* }

typename = {
    primitive         |
    sequence          |
    dictionary        |
    global_identifier |
    scoped_identifier
}

sequence = { sequence_kw ~ "<" ~ typename ~ ">" }
dictionary = { dictionary_kw ~ "<" ~ typename ~ "," ~ typename ~ ">" }

primitive = {
    bool_kw     |
    byte_kw     |
    short_kw    |
    ushort_kw   |
    int_kw      |
    uint_kw     |
    varint_kw   |
    varuint_kw  |
    long_kw     |
    ulong_kw    |
    varlong_kw  |
    varulong_kw |
    float_kw    |
    double_kw   |
    string_kw
}

unchecked_modifier = { unchecked_kw? }

integer = { "-"? ~ ASCII_DIGIT+ }

WHITESPACE = _{ " " | "\t" | NEWLINE }

module_kw = { "module" }
struct_kw = { "struct" }
interface_kw = { "interface" }
enum_kw = { "enum" }

sequence_kw = { "sequence" }
dictionary_kw = { "dictionary" }

void_kw = { "void" }
bool_kw = { "bool" }
byte_kw = { "byte" }
short_kw = { "short" }
ushort_kw = { "ushort" }
int_kw = { "int" }
uint_kw = { "uint" }
varint_kw = { "varint" }
varuint_kw = { "varuint" }
long_kw = { "long" }
ulong_kw = { "ulong" }
varlong_kw = { "varlong" }
varulong_kw = { "varulong" }
float_kw = { "float" }
double_kw = { "double" }
string_kw = { "string" }

unchecked_kw = { "unchecked" }
