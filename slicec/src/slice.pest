// Copyright (c) ZeroC, Inc. All rights reserved.

main = { SOI ~ file_attributes ~ module_def* ~ EOI }

definition = { module_def | struct_def | class_def | exception_def | interface_def | enum_def }

module_start = ${ module_kw ~ ws+ ~ scoped_identifier }
module_def = !{ prelude ~ module_start ~ "{" ~ definition* ~ "}" }

struct_start = ${ struct_kw ~ ws+ ~ identifier }
struct_def = !{ prelude ~ struct_start ~ "{" ~ data_member* ~ "}" }

class_start = ${ class_kw ~ ws+ ~ identifier ~ ws* ~ compact_id ~ ( ws* ~ extends_kw ~ ws* ~ inheritance_list)? }
class_def = !{ prelude ~ class_start ~ "{" ~ data_member* ~ "}" }

exception_start = ${ exception_kw ~ ws+ ~ identifier ~ ( ws* ~ extends_kw ~ ws* ~ inheritance_list)? }
exception_def = !{ prelude ~ exception_start ~ "{" ~ data_member* ~ "}" }

interface_start = ${ interface_kw ~ ws+ ~ identifier ~ ( ws* ~ extends_kw ~ ws* ~ inheritance_list)? }
interface_def = !{ prelude ~ interface_start ~ "{" ~ operation* ~ "}" }

enum_start = ${ unchecked_modifier ~ enum_kw ~ ws+ ~ identifier ~ ( ws* ~ extends_kw ~ ws* ~ typename )? }
enum_def = !{ prelude ~ enum_start ~ "{" ~ enumerator_list? ~ "}" }

return_type = ${ void_kw | stream_modifier ~ (tag ~ ws*)? ~ typename | return_tuple }
return_tuple = !{ "(" ~ parameter_list ~ ")" }
operation_start = ${ idempotent_modifier ~ return_type ~ ws+ ~ identifier }
operation = !{ prelude ~ operation_start ~ "(" ~ parameter_list? ~ ")" ~ ";" }

data_member = ${ prelude ~ ws* ~ member ~ ws* ~ ";" }
member = ${ (tag ~ ws*)? ~ typename ~ ws+ ~ identifier }
tag = !{ tag_kw ~ "(" ~ integer ~ ")" }

parameter_list = !{ ( parameter ~ "," ~ parameter_list) | ( parameter ~ ","? ) }
parameter = ${ prelude ~ ws* ~ stream_modifier ~ member }

enumerator_list = !{ ( enumerator ~ "," ~ enumerator_list ) | ( enumerator ~ ","? ) }
enumerator = !{ prelude ~ identifier ~ ( "=" ~ integer )? }

inheritance_list = !{ ( typename ~ "," ~ inheritance_list ) | ( typename ~ ","? ) }

identifier = @{ ASCII_ALPHA ~ ( "_" | ASCII_ALPHANUMERIC )* }
global_identifier = @{ ( "::" ~ identifier )+ }
scoped_identifier = @{ identifier ~ ( "::" ~ identifier )* }

typename = ${ local_attributes ~ ws* ~ (primitive | sequence | dictionary | global_identifier | scoped_identifier) ~ (ws* ~ "?")? }

sequence = !{ sequence_kw ~ "<" ~ typename ~ ">" }
dictionary = !{ dictionary_kw ~ "<" ~ typename ~ "," ~ typename ~ ">" }

primitive = {
    bool_kw     |
    byte_kw     |
    short_kw    |
    ushort_kw   |
    int_kw      |
    uint_kw     |
    varint_kw   |
    varuint_kw  |
    long_kw     |
    ulong_kw    |
    varlong_kw  |
    varulong_kw |
    float_kw    |
    double_kw   |
    string_kw
}

prelude = !{ local_attributes ~ doc_comment ~ local_attributes }

file_attributes = !{ ("[[" ~ attribute ~ "]]")* }
local_attributes = !{ ("[" ~ attribute ~ "]")* }
attribute = !{ attribute_directive ~ ( "(" ~ attribute_arguments? ~ ")" )? }
attribute_directive = ${ attribute_identifier ~ (":" ~ attribute_identifier)? }
attribute_identifier = @{ (ASCII_ALPHANUMERIC | "_" | "-")+ }
attribute_argument = @{
    "\"" ~ (!"\"" ~ ANY)* ~ "\"" |          // Add support for escaped characters in the future.
    (ASCII_ALPHANUMERIC | "_" | "-" | ":" | "<" | ">")+
}
attribute_arguments = !{ ( attribute_argument ~ "," ~ attribute_arguments) | ( attribute_argument ~ ","? ) }

// "WHITESPACE" and "COMMENT" are special rules that Pest will implicitely allow to appear in between any other rules.
WHITESPACE = _{ " " | "\t" | NEWLINE }
COMMENT = _{ line_comment | block_comment }
// "ws" is used for rules where we have to explicitely handle whitespace.
ws = _{ WHITESPACE | COMMENT }
doc_comment = { ( line_doc_comment+ | block_doc_comment )? }

line_comment = @{ !"///" ~ "//" ~ ( !NEWLINE ~ ANY )* }
line_doc_comment = @{ "///" ~ ( !NEWLINE ~ ANY )* }
block_comment = @{ !"/**" ~ "/*" ~ ( !"*/" ~ ANY )* ~ "*/" }
block_doc_comment = @{ "/**" ~ ( !"*/" ~ ANY )* ~ "*/" }

integer = @{ "-"? ~ ASCII_DIGIT+ }

compact_id = { ("(" ~ integer ~ ")")? }
stream_modifier = { (stream_kw ~ ws+)? }
idempotent_modifier = { (idempotent_kw ~ ws+)? }
unchecked_modifier = { (unchecked_kw ~ ws+)? }

module_kw = { "module" }
struct_kw = { "struct" }
class_kw = { "class" }
exception_kw = { "exception" }
interface_kw = { "interface" }
enum_kw = { "enum" }

sequence_kw = { "sequence" }
dictionary_kw = { "dictionary" }

void_kw = { "void" }
bool_kw = { "bool" }
byte_kw = { "byte" }
short_kw = { "short" }
ushort_kw = { "ushort" }
int_kw = { "int" }
uint_kw = { "uint" }
varint_kw = { "varint" }
varuint_kw = { "varuint" }
long_kw = { "long" }
ulong_kw = { "ulong" }
varlong_kw = { "varlong" }
varulong_kw = { "varulong" }
float_kw = { "float" }
double_kw = { "double" }
string_kw = { "string" }

tag_kw = { "tag" }
stream_kw = { "stream" }
extends_kw = { ":" }
idempotent_kw = { "idempotent" }
unchecked_kw = { "unchecked" }
